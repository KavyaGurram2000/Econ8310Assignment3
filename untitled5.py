# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WzFF1oJJH0-Fuzrgs_p2dsLYDkTy-6dF
"""

from google.colab import files

upload = files.upload()

upload = files.upload()

upload = files.upload()

import torch
import torch.nn as nn
from torchvision import transforms
from torch.utils.data import DataLoader
import pandas as pd
from torch.utils.data import Dataset

# Define the model structure (same as before)
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.fc1 = nn.Linear(64 * 7 * 7, 128)
        self.fc2 = nn.Linear(128, 10)
        self.pool = nn.MaxPool2d(2, 2)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = x.view(-1, 64 * 7 * 7)
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Custom dataset class
class CustomFashionMNISTDataset(Dataset):
    def __init__(self, csv_file, transform=None):
        self.data = pd.read_csv(csv_file)
        self.transform = transform

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        label = self.data.iloc[idx, 0]
        try:
            image = self.data.iloc[idx, 1:].values.astype('float32')
        except ValueError:
            raise ValueError(f"Invalid data format for row {idx}. Expected numeric pixel values.")
        if len(image) != 28 * 28:
            raise ValueError(f"Unexpected image size: {len(image)}, expected 784")
        image = image.reshape(28, 28)

        if self.transform:
            image = self.transform(image)
        else:
            image = torch.tensor(image)

        return image, label

# Load the model and load the weights
model = SimpleCNN()
model.load_state_dict(torch.load("/content/fashion_mnist_model.pth"))
model.eval()

# Define the data transformations
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])

# Load the custom test dataset
test_dataset = CustomFashionMNISTDataset(csv_file='/content/assignment3test.csv', transform=transform)
test_dataloader = DataLoader(test_dataset, batch_size=64, shuffle=False)

# Evaluate the model
correct = 0
total = 0
with torch.no_grad():
    for inputs, labels in test_dataloader:
        inputs = inputs.unsqueeze(1)  # Add channel dimension for grayscale images
        outputs = model(inputs)
        _, predicted = torch.max(outputs, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

accuracy = 100 * correct / total
print(f"Test Accuracy: {accuracy}%")

import torch
import torch.nn as nn
from torchvision import transforms
from torch.utils.data import DataLoader
import pandas as pd
from torch.utils.data import Dataset

# ... (Your model and other code remains the same)

# Custom dataset class
class CustomFashionMNISTDataset(Dataset):
    def __init__(self, csv_file, transform=None):
        self.data = pd.read_csv(csv_file)

        # Drop the first column if it's not numeric (likely a timestamp or index)
        if not pd.api.types.is_numeric_dtype(self.data.iloc[:, 0]):
            self.data = self.data.iloc[:, 1:]

        self.transform = transform

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        # Assuming the first column is now the label
        label = self.data.iloc[idx, 0]
        try:
            image = self.data.iloc[idx, 1:].values.astype('float32')
        except ValueError:
```python
import torch
import torch.nn as nn
from torchvision import transforms
from torch.utils.data import DataLoader
import pandas as pd
from torch.utils.data import Dataset

# ... (Your model and other code remains the same)

# Custom dataset class
class CustomFashionMNISTDataset(Dataset):
    def __init__(self, csv_file, transform=None):
        self.data = pd.read_csv(csv_file)

        # Drop the first column if it's not numeric (likely a timestamp or index)
        if not pd.api.types.is_numeric_dtype(self.data.iloc[:, 0]):
            self.data = self.data.iloc[:, 1:]

        self.transform = transform

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        # Assuming the first column is now the label
        label = self.data.iloc[idx, 0]
        try:
            image = self.data.iloc[idx, 1:].values.astype('float32')
        except ValueError:
            raise ValueError(f"Invalid data format for row {idx}. Expected numeric pixel values.")
        if len(image) != 28 * 28:
            raise ValueError(f"Unexpected image size")

        image = image.reshape(28,28)
        if self.transform:
            image = self.transform(image)
        return image, label
```

import torch
import torch.nn as nn
from torchvision import transforms
from torch.utils.data import DataLoader
import pandas as pd
from torch.utils.data import Dataset

# ... (Your model and other code remains the same)

# Custom dataset class
class CustomFashionMNISTDataset(Dataset):
    def __init__(self, csv_file, transform=None):
        self.data = pd.read_csv(csv_file)

        # Drop the first column if it's not numeric (likely a timestamp or index)
        if not pd.api.types.is_numeric_dtype(self.data.iloc[:, 0]):
            self.data = self.data.iloc[:, 1:]

        self.transform = transform

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        # Assuming the first column is now the label
        label = self.data.iloc[idx, 0]
        try:
            image = self.data.iloc[idx, 1:].values.astype('float32')
        except ValueError:
            # Added indented block to handle ValueError
            raise ValueError(f"Invalid data format for row {idx}. Expected numeric pixel values.")
        if len(image) != 28 * 28:
            raise ValueError(f"Unexpected image size")

        image = image.reshape(28,28)
        if self.transform:
            image = self.transform(image)
        return image, label